# shared.py.in
#
# Copyright 2023 kramo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

"""Shared data across the application."""
from os import getenv
from pathlib import Path

from gi.repository import Gdk, Gio, GLib, Gtk

from hyperplane.postmaster_general import HypPostmasterGeneral

APP_ID = "@APP_ID@"
VERSION = "@VERSION@"
PREFIX = "@PREFIX@"
PROFILE = "@PROFILE@"

schema = Gio.Settings.new(APP_ID)
state_schema = Gio.Settings.new(APP_ID + ".State")

home_path = Path(GLib.get_user_data_dir(), "hyperplane", "home")
home = Gio.File.new_for_path(str(home_path))

show_hidden = state_schema.get_boolean("show-hidden")

tags = []

if (path := home_path / ".hyperplane").is_file():
    tags = list(
        tag for tag in path.read_text(encoding="utf-8").strip().split("\n") if tag
    )

del path

app = None  # pylint: disable=invalid-name
search = ""  # pylint: disable=invalid-name
right_clicked_file = None  # pylint: disable=invalid-name
grid_view = state_schema.get_boolean("grid-view")
undo_queue = {}

postmaster = HypPostmasterGeneral()

closed_folder_texture = texture = Gdk.Texture.new_from_resource(
    PREFIX + "/assets/folder-closed.svg"
)
open_folder_texture = texture = Gdk.Texture.new_from_resource(
    PREFIX + "/assets/folder-open.svg"
)

trash_list = Gtk.DirectoryList.new(None, Gio.File.new_for_uri("trash://"))

is_flatpak = getenv("FLATPAK_ID") == APP_ID

if (
    is_flatpak
    and (
        path := Path(getenv("HOST_XDG_DATA_HOME", Path.home() / ".local" / "share"))
        / "recently-used.xbel"
    ).is_file()
):
    # Use the system-wide RecentManager instead of the application-specific one
    # so Hyperplane's recent files are visible to GVFS
    recent_manager = Gtk.RecentManager(filename=str(path))
else:
    recent_manager = Gtk.RecentManager.get_default()

cut_uris = set()


def set_cut_uris(uris: set[str]) -> None:
    """
    Sets URIs representing files that are going to be moved after a paste operation.

    This is so the widgets' "opacities" can be reduced.
    """
    global cut_uris  # pylint: disable=global-statement

    cut_uris = uris

    postmaster.emit("cut-uris-changed")
